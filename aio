#!/bin/bash
ADD=$2
JAR=/etc/aio	#Pasta das defini√ß√µes
RECEITA_PASTA=/apps/receitas	#Pasta das receitas
BASIS=$RECEITA_PASTA/basis	#Pasta das bases para receitas
RAIZ="https://raw.githubusercontent.com"
APPS=/apps	#Pasta dos apps
OVEN=""
JARRA=""
PRODUTO=""
CAMINHO=`pwd`
AUTOINTEGRAR=1
VERSIONR=202006122130
ISLOCAL=0
troca=""
echo $CAMINHO

### Fun√ß√µes
CALLLOCAL(){
if [[ "$2" == "local" || "$3" == "local" || "$4" == "local" || "$5" == "local" || "$2" == "--local" || "$3" == "--local" || "$4" == "--local" || "$5" == "--local" ]]; then
  echo "local"
  ISLOCAL=1
fi
}

CHECKINTEGRATE(){
if [[ "$1" == "--nointegrate" || "$2" == "--nointegrate" || "$3" == "--nointegrate" || "$4" == "--nointegrate" || "$5" == "--nointegrate" ]]; then
  AUTOINTEGRAR=0
fi
}

CKLOCALNAMES(){
if [ "$2"=="local" || "$2"=="nointegrate" || "$2"=="--local" || "$2"=="--nointegrate"]; then
	$2=""
fi
if [ "$3"=="local" || "$3"=="nointegrate" || "$3"=="--local" || "$3"=="--nointegrate"]; then
	$3=""
fi
if [ "$4"=="local" || "$4"=="nointegrate" || "$4"=="--local" || "$4"=="--nointegrate"]; then
	$4=""
fi
if [ "$5"=="local" || "$5"=="nointegrate" || "$5"=="--local" || "$5"=="--nointegrate"]; then
	$5=""
fi
ADD=`cat $JAR/system.aio | grep -w "$2$3$4$5:" | awk '{print $2}'`
}

CHECKAIOVERSION(){
AIOR=`cat /tmp/book | grep -w "aio:" | awk '{print $2}'`
echo "AIO: $AIOR"
if [ "$VERSIONR" -lt "$AIOR" ]; then
    troca=troca
    echo "Existe uma nova atualiza√ß√£o de base. Digite a sua senha para realizar"
    MSGU003
	GETAIO
fi
}

DOCOOK(){
if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then
 cd $RECEITA_PASTA
 pkg2appimage "$RECEITA_PASTA/$ADD.yml"	#COZINHA
 cd $CAMINHO
 if [ -e "$RECEITA_PASTA/out/" ]; then	#Testa pra ver se foi cozinhado
  PRODUTO=`ls $RECEITA_PASTA/out/`	#Pega o nome do app criado
  echo $ADD: $PRODUTO >> $JAR/aio.list	#Coloca o nome do app novo na lista 
 fi
else
 echo "N√£o existe receita para cozinhar"
fi
}
MOVEAPP(){
  cp -Rf $RECEITA_PASTA/out/*.AppImage $APPS	#Move o app para a pasta de apps
  ln -s $APPS/$PRODUTO $APPS/$ADD.AppImage
  if [ -L "/usr/bin/$ADD" ]; then
   sudo rm -Rf $APPS/$ADD.AppImage
   ln -s $APPS/$PRODUTO $APPS/$ADD.AppImage
  else 
   if [ -e "/usr/bin/$ADD" ]; then
    ln -s $APPS/$PRODUTO $APPS/$ADD.AppImage
    sudo mv /usr/bin/$ADD /usr/bin/$ADD.old
    sudo ln -s $APPS/$ADD.AppImage /usr/bin/$ADD
    else
    ln -s $APPS/$PRODUTO $APPS/$ADD.AppImage
    sudo ln -s $APPS/$ADD.AppImage /usr/bin/$ADD
   fi
  fi
}
DELBINS(){
	rm -RF /usr/bin/$ADD	#Remove o bin√°rio principal
	while IFS= read -r line
	do
	  ITEM=`cat $line | awk '{print $1}'`
	  echo $ITEM
	  if [[ "$ITEM" == "$ADD" ]]; then	#Cria uma lista dos parametros anteriormente adicionados
		echo `cat $line | awk '{print $2}'` >> /tmp/idata.aio 	
	  fi
	done < "$RECEITA_PASTA/idata.aio"
	
	while IFS= read -r line
	do
	  IDATARM=`cat $line | awk {print $0}`
	  rm -Rf /usr/share/applications/$IDATARM	  #Remove os atalhos de integra√ß√£o
	done < "/tmp/idata.aio"
	
}

DEL(){
	EXISTAPP=`cat $JAR/aio.list | grep -w "$ADD:" | awk '{print $2}'`	#Detecta o nome do app antigo
	sed -i '/'$ADD'/d' $JAR/aio.list	#Remove da lista o nome do app existente
	rm -Rf $APPS/$EXISTAPP	#Remove a liga√ß√£o
	if [[ -L "/usr/bin/$ADD" ]]; then
	  sudo bash -c "$DELBINS"
	fi
	rm -Rf $APPS/$EXISTAPP	#Remove o app existente
}

DELOVEN(){
 if [ "$OVEN"=="" ]; then OVEN="0"; fi 
 echo "'$RECEITA_PASTA/$OVEN'"
 if [ -e "$RECEITA_PASTA/$OVEN" ]; then rm -Rf $RECEITA_PASTA/$OVEN; echo "removendo forno"; else  echo "o forno n√£o existe"; fi
 if [ -e "$RECEITA_PASTA/out/" ]; then rm -Rf $RECEITA_PASTA/out; echo "removendo bandeja"; else  echo "a bandeja n√£o existe"; fi
 if [ -e "/tmp/idata" ]; then rm -Rf /tmp/idata; fi
 if [ -e "/tmp/idata.aio" ]; then rm -Rf /tmp/idata.aio; fi
}

EXEINTEGRAR(){
if [[ "$AUTOINTEGRAR"=="1" ]]; then
    mv /tmp/idata/*.idata /tmp/idata/*.desktop    #Renomeia os .idata para .desktop
    sudo bash -c "cp -Rf /tmp/idata/*.desktop /usr/share/applications"    #Move com sudo para a pasta de aplica√ß√µes do sistema
    sudo bash -c "cp -Rf /tmp/idata/*.svg /usr/share/icons/hicolor/256x256/apps/"	#Copia os icones baixados para a pasta do sistema
    sudo bash -c "cp -Rf /tmp/idata/*.png /usr/share/icons/hicolor/256x256/apps/"
#   rm -RF /tmp/idata	#Exclui a pasta de tranferencia
    echo "App integrado com sucesso"
  fi
}

EXENOINTEGRADO(){
	sudo bash -c "cp -Rf $OVEN/$OVEN.AppDir/*.desktop /usr/share/applications/"
	LOCALAPPICON="$RECEITA_PASTA/$OVEN/$ADD.AppDir"
	if [ -e "$LOCALAPPICON/*.svg" ]; then sudo bash -c "cp -Rf $LOCALAPPICON/*.svg /usr/share/icons/hicolor/256x256/apps/"
	else sudo bash -c "cp -Rf $LOCALAPPICON/*.png /usr/share/icons/hicolor/256x256/apps/"; fi
	echo "App adicionado ao sistema"
}

GETAIO(){
	rm -Rf $JAR/aio
	wget -q --show-progress $RAIZ/andryeltj/aio/master/aio -P $JAR
	chmod +x $JAR/aio
	AIOR=`cat $JAR/aio | grep -w "VERSIONR=" | awk '{print $2}'`
	echo "üóò AIO: $AIOR"
}

GETRECEITA(){
 ADD=`cat /tmp/book | grep -w "$ADD:" | awk '{print $2}'`
 JARRA=`cat /tmp/book | grep -w "$ADD" | awk '{print $3}'`
 if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then rm -Rf $RECEITA_PASTA/$ADD.yml; fi
 echo "$RAIZ/$JARRA/$ADD.yml"
 wget -q --show-progress $RAIZ/$JARRA/$ADD.yml -P $RECEITA_PASTA/
 if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then OVEN=`cat $RECEITA_PASTA/$ADD.yml | grep "app:" | awk '{print $0}'`;  else echo "Receita n√£o baixada"; fi
}

GETNETBOOK(){
	if [[ -e "$JAR/jar.aio" ]]; then
	  troca=troca
	else
	  JARCONTENT
	fi
	if [[ -e "/tmp/book" ]]; then
	  rm -Rf /tmp/book	#REMOVE O LIVRO ANTIGO
	fi
	while IFS= read -r line
	do
		rm -Rf /tmp/book
		wget -q --show-progress -q $line/book -P /tmp/	#BAIXA O NOVO LIVRO
	done < $JAR/jar.aio
}

GETSUGESTS(){ 
if [[ -e "$RECEITA_PASTA/$ADD.yml" ]]; then
 SUGESTS=`cat $RECEITA_PASTA/$ADD.yml | grep -w "sugests:"`	#Cria a lista de provaveis nomes para o app atravez da receita
 sed -i '/'$ADD'/d' $JAR/system.aio
 for n in $SUGESTS; do
  echo $n: $ADD >> $JAR/system.aio
  sed -i '/sugests/d' $JAR/system.aio
  shift
 done
else
 echo "A receita n√£o existe para ver se existem sugest√µes de palavras"
fi
}

JARCONTENT(){
  echo "https://raw.githubusercontent.com/andryeltj/receitas/master" > $JAR/jar.aio
}

LISTJAR(){
 echo "
 #######################################################
 #######################################################
 	<Nome>		<Jarra(Reposit√≥rio)>"
 rm -Rf /tmp/book2
while IFS= read -r line
do
   echo $line | awk '{print "  "$1"		"$3}' >> /tmp/book2
done < /tmp/book
 sed -i '/aio:/d' /tmp/book2
 cat /tmp/book2
 echo " #######################################################
 #######################################################"
}

TSTINTEGRAR(){
if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then
 if [[ `cat $RECEITA_PASTA/$ADD.yml | grep -w "integrate:" | awk '{print $2}'` == "yes" ]]; then
  echo "Receita com integra√ß√£o"
  if [ -e "$RECEITA_PASTA/out" ]; then
   mkdir /tmp/idata	#Cria a pasta de transferencia
   
   if [ -e "$RECEITA_PASTA/$OVEN/$ADD.AppDir/*.idata" ]; then	#Checa se existem arquivos .idata na bandeja
    cp -Rf $RECEITA_PASTA/$OVEN/$ADD.AppDir/*.idata /tmp/idata	#Copia os .idata
    echo `ls /tmp/idata`: $ADD >> $RECEITA_PASTA/idata.aio	#Lista o conteudo na pasta de transferencia para a lista dos dados integrados
   else cp -Rf $RECEITA_PASTA/$OVEN/*.desktop /tmp/idata
   fi
   if [ -e "$RECEITA_PASTA/$OVEN/$ADD.AppDir/icons.aio" ]; then
    mkdir /tmp/idata/icons;    mv -Rf $RECEITA_PASTA/$OVEN/$ADD.AppDir/icons.aio /tmp/idata
    while IFS= read -r line
    do
	wget -q --show-progress $line -P /tmp/idata/icons/	#BAIXA OS ICONES LISTADOS
    done < /tmp/idata/icons.aio
    echo `ls /tmp/idata/icons`: $ADD >> $RECEITA_PASTA/idata.aio	#Lista os icones a ser inseridos no sistema
   fi
   
   EXEINTEGRAR
  else
   echo "Ocorreu algum erro ao cozinhar"
  fi
 else
  echo "Esta receita n√£o gera integra√ß√£o"
  EXENOINTEGRADO
 fi
else
 echo "TSTINTEGRAR: Esta receita n√£o existe"
fi
}

NATIVEFIER(){
	#A fun√ß√£o deve ser iniciada antes de DOCOOK para baixar no disco a base que vai para a receita.	
	NATIVEFIERCK=`cat $RECEITA_PASTA/$ADD.yml | grep -w "nativefier:" | awk '{print $2}'`
	if [ "$NATIVEFIERCK" == "yes" ]; then
	  if [[ -e "$BASIS/NativefierBasis.tar.xz" ]]; then
	   troca=troca;	  else
	   BASISLINK=`cat $RECEITA_PASTA/$ADD.yml | grep -w "nativefierlink:" | awk '{print $2}'`
	   wget -q --show-progress --no-check-certificate '$BASISLINK' -O $BASIS/NativefierBasis.tar.xz
	  fi
	fi
}

TESTLOCAL(){
echo "##################### $ISLOCAL ###################"
if [ "$ISLOCAL" == "1" ]; then
  echo "##################### $ISLOCAL ###################"
  echo "üìú Offline"
  MSGU004
  OVEN=`cat $RECEITA_PASTA/$ADD.yml | grep "app:" | awk '{print $0}'`
else
  echo "üìú ONLINE"
  GETNETBOOK
  GETRECEITA
  GETSUGESTS
fi
}

HELP(){
  echo "##################################
#Ooops... Algo aconteceu de errado
##################################
#
#As op√ß√µes corretas s√£o:
#
#add ou install - instala o app
#del ou remove - remove a instala√ß√£o de um app
#upd ou update - Atualiza up app espec√≠fico
# -i	√â o mesmo que 'add'
# -d	√â o mesmo que 'del'
# -u	√â o mesmo que 'upd'
#
#
#"
}

### AMBIENTES GR√ÄFICOS
APPIN=""
COMO(){
export GUI="
<window decorated=\"false\" icon-name=\"gtk-dialog-question\"><vbox><text label=\"Como?\"></text><text label=\"Digite novamente o nome do App para\"></text><text label=\"que eu possa encontr√°-lo\"></text>
<entry><variable>APPIN</variable></entry><hbox homogeneous=\"true\"><button space-fill=\"true\" label=\"OK\"><action>echo Busque por: $"APPIN"</action><action>$2=$"APPIN"</action></button><button space-fill=\"true\" label=\"X\"></button></hbox></vbox></window>"
gtkdialog -p GUI
}

WELCOME(){
export GUI="
<vbox><text label=\"AIO\"></text><text><label>Ol√°, Sou o gerenciador de aplicativos</label></text>
<entry></entry><text><label>Para instalar coloque acima add e o nome do programa</label></text>
<text><label>Para remover coloque acima del e o nome do programa</label></text><hbox homogeneous=\"true\"><button space-fill=\"true\" label=\"Executar\"></button><button space-fill=\"true\" label=\"Cancelar\"></button><button space-fill=\"true\" label=\"Op√ß√µes...\"></button></hbox>
</vbox>"
gtkdialog -p GUI
}


############# MENSAGENS DO SISTEMA
MSGA001(){
	echo " "
	}
MSGAE001(){
	notify-send -i "gtk-dialog-warning" "N√£o encontrado" "O App n√£o foi encontrado nas fontes"
	}
MSGD001(){
	echo " "
	}
MSGU001(){
	notify-send -i gtk-refresh "Atualizando o app: $1 $2 $3 $4"
	}
MSGU002(){
	notify-send -i gtk-yes -u normal "Atualizar" "Instala√ß√£o de $1 $2 $3 $4 completa"
	}
MSGU003(){
	notify-send -i gtk-refresh "Existe uma nova atualiza√ß√£o de base. Digite a sua senha para realizar"
	}
MSGU004(){
	notify-send -i gtk-yes "A instala√ß√£o est√° sendo realizada com uma receita local"
	}
MSGUE001(){
	notify-send -i gtk-dialog-question -u normal "Como?" "N√£o consegui encontrar o app para atualizar"
}

### Lancadores
if [ -e "$APPS" ]; then
 troca=troca
  else
 sudo mkdir $APPS; sudo chmod -R 777 $APPS;
 if [ -e "$APPS" ]; then  echo " [üì•‚úî] Pasta de Apps criada"; fi
fi
if [[ -e "$RECEITA_PASTA" ]]; then troca=troca; else mkdir $RECEITA_PASTA; sudo chmod -R 777 $RECEITA_PASTA; if [ -e "$RECEITA_PASTA" ]; then echo " [üìú‚úî] Criou a pasta aonde v√£o as receitas"; fi	#Cria a pasta aonde v√£o ficar as bases
fi
if [[ -e "$BASIS" ]]; then troca=troca; else mkdir $BASIS; sudo chmod -R 777 $BASIS; if [ -e "$BASIS" ]; then echo " [üìú‚úî] Criou a pasta para as bases das receitas"; fi 	#Cria a pasta aonde v√£o ficar as bases
fi
if [ -e "$JAR" ]; then troca=troca; 
else sudo mkdir $JAR; sudo chmod -R 777 $JAR;	#Cria a pasta aonde v√£o ficar as defini√ß√µes
 if [ -e "$JAR" ]; then mv $CAMINHO/aio $JAR; rm -Rf /usr/bin/aio; ln -s $JAR/aio /usr/bin/aio; echo " [üñ¥ ‚úî] Jarra criada"; fi
 if [ -e "/usr/bin/aio" ]; then ln -s $JAR/aio /usr/bin/aio; fi
fi
if [ -e "$JAR/jar.aio" ]; then troca=troca; else JARCONTENT; fi
 if [ -e "$JAR/aio" ]; then troca=troca;	if  [ -e "/usr/bin/aio" ]; then troca=troca; else ln -s $JAR/aio /usr/bin/aio; fi
 else mv $CAMINHO/aio $JAR; ln -s $JAR/aio /usr/bin/aio; 
fi
if [ -e "/usr/bin/pkg2appimage" ]; then troca=troca;
 else sudo wget -q --show-progress https://raw.githubusercontent.com/AppImage/AppImages/master/pkg2appimage -P /usr/bin/
fi

#### COMANDOS E INTEGRA√á√îES
if [[ "$1" == "add" || "$1" == "install" || "$1" == "-i" ]]; then
 CHECKINTEGRATE
 TESTLOCAL
 NATIVEFIER
 DOCOOK
 TSTINTEGRAR
 DELOVEN
 
 
elif [[ "$1" == "del" || "$1" == "remove" || "$1" == "-d" ]]; then
 CKLOCALNAMES
 DEL
 
 
elif [[ "$1" == "list" || "$1" == "-l" ]]; then
 GETNETBOOK
 LISTJAR
 CHECKAIOVERSION
 
 
elif [[ "$1" == "up" || "$1" == "update" || "$1" == "-u" ]]; then
 GETNETBOOK
 CHECKAIOVERSION
 
 
elif [[ "$1" == "atu" || "$1" == "atualizar" || "$1" == "-a" ]]; then
 CKLOCALNAMES
 CALLLOCAL
 CHECKINTEGRATE
 echo "App para atualizar: $ADD"
 TESTLOCAL
 if [ -e "RECEITA_PASTA/$ADD.yml" ]; then
   echo "Receita encontrada no disco"
   MSGU001
   NATIVEFIER
   DOCOOK
   TSTINTEGRAR
   DEL
   DELOVEN
   MSGU002
 else
   echo "Receita n√£o encontrada"
   echo "A receita buscada foi: $APP"
   MSGUE001
   COMO
 fi
 
 
elif [[ "$1" == "--help" || "$2" == "--help" || "$3" == "--help" || "$4" == "--help" || "$1" == "help" || "$2" == "help" || "$3" == "help" || "$4" == "help" ]]; then
 HELP
 
 
else	
 WELCOME
fi
