#!/bin/bash
ADD=$2
JAR=/etc/aio	#Pasta das defini√ß√µes
RECEITA_PASTA=/home/apps/receitas	#Pasta das receitas
BASIS=$RECEITA_PASTA/basis	#Pasta das bases para receitas
RAIZ="https://raw.githubusercontent.com"
APPS=/home/apps	#Pasta dos apps
COMBURENT="pkg2appimage"
BINS=/usr/bin
LOCAL=/home/`whoami`/.local
LOCALBINS=$LOCAL/bin
LOCALICONS=$LOCAL/share/icons/hicolor/256x256/apps
ELINKS=$LOCAL/share/applications
OVEN=""
JARRA=""
PRODUTO=""
CAMINHO=`pwd`
AUTOINTEGRAR=0
VERSIONR=202101151120
ISLOCAL=0
troca=""
echo $CAMINHO
echo $1 $2 $3 $4 $5
### Fun√ß√µes
CALLLOCAL(){
if [[ "$2" == "local" || "$3" == "local" || "$4" == "local" || "$5" == "local" || "$2" == "--local" || "$3" == "--local" || "$4" == "--local" || "$5" == "--local" ]]; then
  echo "local"
  ISLOCAL=1
fi
}

CHECKINTEGRATE(){
if [[ "$1" == "--nointegrate" || "$2" == "--nointegrate" || "$3" == "--nointegrate" || "$4" == "--nointegrate" || "$5" == "--nointegrate" ]]; then
  AUTOINTEGRAR=1
fi
}

CKLOCALNAMES(){
if [ "$2"=="local" || "$2"=="nointegrate" || "$2"=="--local" || "$2"=="--nointegrate"]; then
	$2=""
fi
if [ "$3"=="local" || "$3"=="nointegrate" || "$3"=="--local" || "$3"=="--nointegrate"]; then
	$3=""
fi
if [ "$4"=="local" || "$4"=="nointegrate" || "$4"=="--local" || "$4"=="--nointegrate"]; then
	$4=""
fi
if [ "$5"=="local" || "$5"=="nointegrate" || "$5"=="--local" || "$5"=="--nointegrate"]; then
	$5=""
fi
ADD=`cat $JAR/system.aio | grep -w "$2$3$4$5:" | awk '{print $2}'`
}

CHECKAIOVERSION(){
AIOR=`cat /tmp/book | grep -w "aio:" | awk '{print $2}'`
echo "AIO: $AIOR"
if [ "$VERSIONR" -lt "$AIOR" ]; then
    troca=troca
    echo "Existe uma nova atualiza√ß√£o de base."
    MSGU003
	GETAIO
fi
}

DOCOOK(){
PRATO=$RECEITA_PASTA/out/
MISTURA=$RECEITA_PASTA/$OVEN
FORNO=$MISTURA/$ADD.AppDir
if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then
 cd $RECEITA_PASTA
 echo "##*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*##"
 pkg2appimage "$RECEITA_PASTA/$ADD.yml"	#COZINHA
 echo "##*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*##"
 echo "$MISTURA
 " 
 if [ -e "$MISTURA" ]; then 
    if [ "$whoami"=="root" ]; then chmod 777 $MISTURA; chmod 777 $FORNO; chmod 777 $PRATO; fi ##Conten√ß√£o para caso seja gerado com sudo    
 else echo "Aconteceu algum erro na gera√ß√£o do arquivo"; fi
 cd $CAMINHO
 if [ -e "$PRATO" ]; then	#Testa pra ver se foi cozinhado
  PRODUTO=`ls $RECEITA_PASTA/out/`	#Pega o nome do app criado
  APPNMLIST=`cat $JAR/aio.list | grep -w '$ADD: $PRODUTO'`; echo $APPNMLIST
  if [ "$APPNMLIST" == "$ADD: $PRODUTO" ]; then
   sed -i '/'$ADD'/d' $JAR/aio.list; echo "$ADD: $PRODUTO" >> $JAR/aio.list;
  else echo "$ADD: $PRODUTO" >> $JAR/aio.list;	#Coloca o nome do app novo na lista 
  fi
 else
  echo "N√£o existe receita para cozinhar"
 fi
fi
}

DELBINS(){
	rm -RF $BINS/$ADD	#Remove o bin√°rio principal
	while IFS= read -r line
	do
	  ITEM=`cat $line | awk '{print $1}'`
	  echo $ITEM
	  if [[ "$ITEM" == "$ADD" ]]; then	#Cria uma lista dos parametros anteriormente adicionados
		echo `cat $line | awk '{print $2}'` >> /tmp/idata.aio 	
	  fi
	done < "$JAR/idata.aio"
	
	while IFS= read -r line
	do
	  IDATARM=`cat $line | awk {print $0}`
	  rm -Rf $ELINKS/$IDATARM	  #Remove os atalhos de integra√ß√£o
	done < "/tmp/idata.aio"
	
}

DEL(){
	EXISTAPP=`cat $JAR/aio.list | grep -w "$ADD:" | awk '{print $2}'`	#Detecta o nome do app antigo
	sed -i '/'$ADD'/d' $JAR/aio.list	#Remove da lista o nome do app existente
	rm -Rf $APPS/$EXISTAPP	#Remove a liga√ß√£o
	if [[ -L "$BINS/$ADD" ]]; then
	  sudo bash -c "$DELBINS"
	fi
	rm -Rf $APPS/$EXISTAPP	#Remove o app existente
}

DELOVEN(){
 echo "FORNO: $OVEN"
 echo "$MISTURA"
 if [ -e "$FORNO" ]; then rm -Rf $MISTURA; echo "removendo Ingredintes"; else  echo "Pasta com Ingredientes n√£o existe"; fi
 if [ -e "$PRATO" ]; then rm -Rf $PRATO; echo "removendo a prateleira"; else  echo "a preteleira n√£o existe"; fi
}

#EXEINTEGRAR(){
#ATALHOS=`ls $FORNO/usr/share/applications/`
#while IFS= read -r line
#do
#  IDATARM=`cat $line | awk {print $0}`
#  cp -f $FORNO/usr/share/applications/$line $ELINKS/$line	  #Move os atalhos
#  sed 's|Exec=|Exec=$LOCALBINS/|g' $ELINKS/$line
#done < $ATALHOS
#echo "Atalhos integrados"
#UPDATEICONS
#}

#UPDATEICONS(){
# if [[ -e "$FORNO/*.svg" || -e "$FORNO/*.png" ]]; then
#  if [ -e "$FORNO/*.svg" ]; then 
#   ICONCAT=`ls $FORNO/*.svg`; cp -Rf $FORNO/$ICONCAT $RECEITA_PASTA/Icons; ln -s $RECEITA_PASTA/Icons/$ICONCAT $LOCALICONS/$ICONCAT
#   else ICONCAT=`ls $FORNO/*.png`;  cp -Rf $FORNO/$ICONCAT $RECEITA_PASTA/Icons; ln -s $RECEITA_PASTA/Icons/$ICONCAT $LOCALICONS/$ICONCAT; fi
# else
#  echo "N√£o existem √≠cones no forno"
# fi
#}

GETAIO(){
	rm -Rf $JAR/aio
	wget -q --show-progress $RAIZ/andryeltj/aio/master/aio -P $JAR
	chmod +x $JAR/aio
	AIOR=`cat $JAR/aio | grep -w "VERSIONR=" | awk '{print $2}'`
	echo "üóò AIO: $AIOR < Atualizado para esta vers√£o"
}

GETRECEITA(){
 ADD=`cat /tmp/book | grep -w "$ADD:" | awk '{print $2}'`
 JARRA=`cat /tmp/book | grep -w "$ADD" | awk '{print $3}'`
 if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then rm -Rf $RECEITA_PASTA/$ADD.yml; fi
 echo "$RAIZ/$JARRA/$ADD.yml"
 wget -q --show-progress $RAIZ/$JARRA/$ADD.yml -P $RECEITA_PASTA/
 if [ "`whoami`"=="root" ]; then chmod 777 $RECEITA_PASTA/$ADD.yml; fi
 if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then OVEN=`cat $RECEITA_PASTA/$ADD.yml | grep "app:" | awk '{print $2}'`; echo "OVEN:$OVEN" else echo "Receita n√£o baixada"; fi
}

GETCOMBURENT(){
  GETNETBOOK
  JARRA=`cat /tmp/book | grep -w "$COMBURENT" | awk '{print $3}'`
  wget -q --show-progress $RAIZ/$JARRA/$COMBURENT -P /etc/aio/; chmod +x $JAR/$COMBURENT;
  if [ -e "$BINS/$COMBURENT" ]; then troca=troca; else sudo ln -s $JAR/$COMBURENT $BINS/$COMBURENT; fi
  if [ -e "$JAR/$COMBURENT" ]; then troca=troca; echo "Comburente adiquirido"; else echo "Falha ao adiquirir comburente"; fi 
  if [ -e "$BINS/$COMBURENT" ]; then troca=troca; echo "Comburente integrado ao sistema"; else echo "Falha ao integrar comburente"; fi 
}

GETNETBOOK(){
	if [[ -e "$JAR/jar.aio" ]]; then
	  troca=troca
	else
	  JARCONTENT
	fi
	if [[ -e "/tmp/book" ]]; then
	  rm -Rf /tmp/book	#REMOVE O LIVRO ANTIGO
	fi
	while IFS= read -r line
	do
		rm -Rf /tmp/book
		wget -q --show-progress -c $line/book -P /tmp/	#BAIXA O NOVO LIVRO
		if [ "`whoami`" == "root" ]; then chmod 777 /tmp/book; fi
	done < $JAR/jar.aio
}

GETSUGESTS(){ 
if [ -e "$RECEITA_PASTA/$ADD.yml" ]; then
 SUGESTS=`cat $RECEITA_PASTA/$ADD.yml | grep -w "sugests:"`	#Cria a lista de provaveis nomes para o app atravez da receita
 sed -i '/'$ADD'/d' $JAR/system.aio
 for n in $SUGESTS; do
  echo $n: $ADD >> $JAR/system.aio
  sed -i '/sugests/d' $JAR/system.aio
  shift
 done
else
 echo "A receita n√£o existe para ver se existem sugest√µes de palavras"
fi
}

JARCONTENT(){
  echo "https://raw.githubusercontent.com/andryeltj/receitas/master" > $JAR/jar.aio
}

LISTJAR(){
 echo "
 #######################################################
 #######################################################
 	<Nome>					<Jarra(Reposit√≥rio)>"
 rm -Rf /tmp/book2
while IFS= read -r line
do
   echo $line | awk '{print "  "$1"					"$3}' >> /tmp/book2
done < /tmp/book

# if [ "$whoami"=="root" ]; then chmod 777 /tmp/book2; fi
sed -i '/aio:/d' /tmp/book2
cat /tmp/book2
 echo " #######################################################
 #######################################################"
}

MOVEAPP(){
### Parte dessa fun√ß√£o s√≥ deve ser chamada se o Produto j√° existir mas aquele usuario ainda n√£o o tem > somente lincar
echo "Produto: $PRODUTO"
if [ -e "$RECEITA_PASTA/out/$PRODUTO" ]; then cp -Rf $RECEITA_PASTA/out/$PRODUTO $APPS;	#Move o app para a pasta de apps
 chmod 777 $APPS/$PRODUTO; echo "Produto encontrado, movendo para a Mesa"; else echo "produto n√£o existe, ou n√£o encontrado"; fi
#MOVXEKLINK

echo "$ADD: $ADD" >> $JAR/system.aio
#if [ "`whoami`" == "root" ]; then sudo chmod 777 $JAR/system.aio; fi
#if [[ -e "$APPS/$ADD.AppImage" && -e '$APPS/$PRODUTO' ]]; then echo "liga√ß√£o atualizada"; fi
}

#MOVUPDATELINK(){
#	echo "linkando produto"
#	if [ -e '$APPS/$PRODUTO' ]; then ln -s $APPS/$PRODUTO $APPS/$ADD.AppImage; ln -s $APPS/$ADD.AppImage $LOCALBINS; if [ "`whoami`"=="root" ]; then chmod 777 $APPS/$ADD.AppImage; fi else echo "Produto n√£o movido da pasta OUT"; fi
#}
#MOVXEKLINK(){
#	echo "atualizando link"
#	if [ -e '$APPS/$ADD.AppImage' ]; then rm $APPS/$ADD.AppImage; MOVUPDATELINK; else MOVUPDATELINK; fi
#}
#MOVLINKTOBIN(){
#	echo "ingress√£o do link ao sistema"
#	if [ "`whoami`" == "root" ]; then troca=troca; else echo "Tornando dispon√≠vel para o sistema. Digite sua senha ü°£"; fi
#	if [ -e "$BINS/$ADD" ]; then
#	 if [ -L "$BINS/$ADD" ]; then troca=troca; else
#	  sudo mv $BINS/$ADD $BINS/$ADD.old; sudo ln -s $APPS/$ADD.AppImage $BINS/$ADD; sudo chmod 777 $BINS/$ADD; fi
#	else
#	 sudo ln -s $APPS/$ADD.AppImage $BINS/$ADD; sudo chmod 777 $BINS/$ADD;
#	fi
#}

MOUNTPAGE(){
	# MainCSS='<link rel="stylesheet" type="text/css" href="'
# Css01=$MainCSS$RAIZ'/andryeltj/aio/master/store/main.css">'
 CssLk01=`curl $RAIZ/andryeltj/aio/master/store/main.css`
 Css01="<style>"$CssLk01"</style>"
 JsMain='<script type="text/javascript" src="'$RAIZ'/andryeltj/aio/master/store/jquery.js"></script>'
 HTMLINFO="<head><title>Store</title><meta chaset=UTF-8> $Css01 $JsMain </head>"
 CList=`cat /tmp/book2`
 CBook=`cat /etc/aio/aio.list`
 HtmlHAreas="<div class='list'>"$CList"</div><div class='book'>"$CBook"</div>"
 CORPO=$HtmlHAreas
 aio list
 MainBAR="<div class='mainbar'><a class='aiologo'>AIO</a><span class='searchbar'></span><div style='float:right'><a>A</a><a href='aio:store-up'>R</a><div>"
 echo "$HTMLINFO<body><center><h1>Voce abriu a Loja, Bem vindo!</h1></center><br><div>$CORPO</div>$MainBAR</body>" > /tmp/store.html
	}

NATIVEFIER(){
	#A fun√ß√£o deve ser iniciada antes de DOCOOK para baixar no disco a base que vai para a receita.	
	NATIVEFIERCK=`cat $RECEITA_PASTA/$ADD.yml | grep -w "nativefier:" | awk '{print $2}'`
	if [ "$NATIVEFIERCK" == "yes" ]; then
	  if [[ -e "$BASIS/NativefierBasis.tar.xz" ]]; then
	   troca=troca;	  else
	   BASISLINK=`cat $RECEITA_PASTA/$ADD.yml | grep -w "nativefierlink:" | awk '{print $2}'`
	   wget -q --show-progress --no-check-certificate '$BASISLINK' -O $BASIS/NativefierBasis.tar.xz
	  fi
	fi
}

TESTLOCAL(){
echo "##################### $ISLOCAL ###################"
if [ "$ISLOCAL" == "1" ]; then
  echo "##################### $ISLOCAL ###################"
  echo "üìú Offline"
  MSGU004
  OVEN=`cat $RECEITA_PASTA/$ADD.yml | grep "app:" | awk '{print $2}'`
else
  echo "üìú ONLINE"
  GETNETBOOK
  GETRECEITA
  GETSUGESTS
fi
}

HELP(){
  echo "##################################
#Ooops... Algo aconteceu de errado
##################################
#
#As op√ß√µes corretas s√£o:
#
#add ou install - instala o app
#del ou remove - remove a instala√ß√£o de um app
#upd ou update - Atualiza up app espec√≠fico
# -i	√â o mesmo que 'add'
# -d	√â o mesmo que 'del'
# -u	√â o mesmo que 'upd'
#
#
#"
}

############# MENSAGENS DO SISTEMA
MSGA001(){
	echo " "
	}
MSGAE001(){
	notify-send -i "gtk-dialog-warning" "N√£o encontrado" "O App n√£o foi encontrado nas fontes"
	}
MSGD001(){
	echo " "
	}
MSGU001(){
	notify-send -i gtk-refresh "Atualizando o app: $1 $2 $3 $4"
	}
MSGU002(){
	notify-send -i gtk-yes -u normal "Atualizar" "Instala√ß√£o de $1 $2 $3 $4 completa"
	}
MSGU003(){
	notify-send -i gtk-refresh "Existe uma nova atualiza√ß√£o de base. Digite a sua senha para realizar"
	}
MSGU004(){
	notify-send -i gtk-yes "A instala√ß√£o est√° sendo realizada com uma receita local"
	}
MSGUE001(){
	notify-send -i gtk-dialog-question -u normal "Como?" "N√£o consegui encontrar o app para atualizar"
}

INSTALLAIO(){
	sudo mkdir $JAR; sudo chmod -R 777 $JAR; sudo apt install build-essential libcurl4 curl;
	GETINTEGRATE=https://github.com/TheAssassin/AppImageLauncher/releases/download/v2.2.0/appimagelauncher_2.2.0-travis995.0f91801.bionic_amd64.deb
	wget -q --show-progress -c $GETINTEGRATE -O AppIL.deb && dpkg -i AppIL.deb 
	if [ -e "$JAR" ]; then mv $CAMINHO/aio $JAR; rm -Rf $BINS/aio; ln -s $JAR/aio $BINS/aio; echo " [üñ¥ ‚úî] Jarra criada"; else echo "A pasta em JARRA n√£o foi criada"; fi
}

### Lancadores
if [ -e "$APPS" ]; then troca=troca; else sudo mkdir $APPS; sudo chmod -R 777 $APPS; if [ -e "$APPS" ]; then  echo " [üì•‚úî] Pasta de Apps criada"; fi fi
if [[ -e "$RECEITA_PASTA" ]]; then troca=troca; else mkdir $RECEITA_PASTA; sudo chmod -R 777 $RECEITA_PASTA; if [ -e "$RECEITA_PASTA" ]; then echo " [üìú‚úî] Pasta das receitas criada"; fi	fi #Cria a pasta aonde v√£o ficar as bases
if [[ -e "$BASIS" ]]; then troca=troca; else mkdir $BASIS; sudo chmod -R 777 $BASIS; if [ -e "$BASIS" ]; then echo " [üìú‚úî] Pasta das bases criada"; fi fi 	#Cria a pasta aonde v√£o ficar as bases
if [ -e "$JAR" ]; then troca=troca; else INSTALLAIO;	#Cria a pasta aonde v√£o ficar as defini√ß√µes
 
 if [ -e "$BINS/aio" ]; then ln -s $JAR/aio $BINS/aio; fi 
fi
if [ -e "/usr/share/applications/aio.desktop" ]; then troca=troca; else 
echo "[Desktop Entry]
Type=Application
Name=AIO
Exec=aio %u
Icon=utilities-terminal
Terminal=true
MimeType=x-scheme-handler/aio;
Categories=System;
NoDisplay=true" >> $JAR/aio.desktop
sudo cp -f $JAR/aio.desktop /usr/share/applications
fi
if [ -e "$JAR/jar.aio" ]; then troca=troca; else JARCONTENT; fi
if [ -e "$JAR/aio" ]; then troca=troca; if [ -e "$BINS/aio" ]; then troca=troca; else ln -s $JAR/aio $BINS/aio; fi else mv $CAMINHO/aio $JAR; ln -s $JAR/aio $BINS/aio; fi
if [ -e "$JAR/$COMBURENT" ]; then troca=troca; else GETCOMBURENT; fi
if [ -e "$JAR/system.aio" ]; then troca=troca; else echo "" > $JAR/system.aio; sudo chmod 777 $JAR/system.aio; fi
if [ "`whoami`" == "root" ]; then troca=troca; else
 if [ -e "$LOCAL" ]; then troca=troca; else mkdir $LOCAL; fi
 if [ -e "$LOCALBINS" ]; then troca=troca; else mkdir $LOCALBINS; fi
 if [ -e "$LOCALICONS" ]; then troca=troca; else mkdir $LOCALICONS; fi
 if [ -e "$ELINKS" ]; then troca=troca; else mkdir $ELINKS; fi
fi


#### COMANDOS E INTEGRA√á√îES
if [[ "$1" == "add" || "$1" == "install" || "$1" == "-i" ]]; then
 if [[ "`whoami`" == "root" ]]; then echo "Por favor tente instalar sem ser o Administrador"; else
  echo "`whoami`"
  CHECKINTEGRATE
  TESTLOCAL
  NATIVEFIER
  DOCOOK
  MOVEAPP
#  EXEINTEGRAR
  if [[ "$3" == "--mb" || "$4" == "--mb" ]]; then echo "A Bases ser√£o mantidas"; else DELOVEN; fi
 fi
 
elif [[ "$1" == "del" || "$1" == "remove" || "$1" == "-d" ]]; then
 CKLOCALNAMES
 DEL
 
 
elif [[ "$1" == "list" || "$1" == "-l" ]]; then
 GETNETBOOK
 LISTJAR
 CHECKAIOVERSION
 
 
elif [[ "$1" == "up" || "$1" == "update" || "$1" == "-u" ]]; then
 GETNETBOOK
 CHECKAIOVERSION
 
 
elif [[ "$1" == "atu" || "$1" == "atualizar" || "$1" == "-a" ]]; then
 CKLOCALNAMES
 CALLLOCAL
 CHECKINTEGRATE
 echo "App para atualizar: $ADD"
 TESTLOCAL
 if [ -e "RECEITA_PASTA/$ADD.yml" ]; then
   echo "Receita encontrada no disco"
   MSGU001
   NATIVEFIER
   DOCOOK
   TSTINTEGRAR
   DEL
   if [[ "$3" == "--mb" || "$4" == "--mb" ]]; then echo "A Bases ser√£o mantidas"; else DELOVEN; fi
   MSGU002
 else
   echo "Receita n√£o encontrada"
   echo "A receita buscada foi: $APP"
   MSGUE001
 fi
 
 
elif [[ "$1" == "--help" || "$2" == "--help" || "$3" == "--help" || "$4" == "--help" || "$1" == "help" || "$2" == "help" || "$3" == "help" || "$4" == "help" ]]; then
 HELP
elif [[ "$1" == "store" ]]; then
 if [[ "$3" == "-r" || "$4" == "-r" ]]; then
  MOUNTPAGE
 else
  MOUNTPAGE
  xdg-open file:///tmp/store.html
 fi
elif [[ "$1" == "store-up" ]]; then
 MOUNTPAGE
else
troca=troca
fi
